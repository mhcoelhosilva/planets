#version 330 core
uniform mat4 MVP;
uniform mat4 M;
uniform mat4 V;
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;
out vec2 UV;
out vec4 texCoords;
out vec3 Normal_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 EyeDirection_cameraspace;
void main()
{
    gl_Position = MVP * vec4(vertexPosition_modelspace, 1.0);
    UV = vec2(vertexUV.x, 1.0 - vertexUV.y);
    texCoords = vec4(vertexPosition_modelspace, 1.0);
// Position of the vertex, in worldspace : M * position
	 vec3 Position_worldspace = (M * vec4(vertexPosition_modelspace, 1)).xyz;
// Vector that goes from the vertex to the camera, in camera space.
// In camera space, the camera is at the origin (0,0,0).
	 vec3 vertexPosition_cameraspace = (V * M * vec4(vertexPosition_modelspace, 1)).xyz; 
	 vec3 EyeDirection_cameraspace = vec3(0, 0, 0) - vertexPosition_cameraspace; 
// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	 vec3 LightPosition_worldspace = vec3(0, 0, 68);	
	 vec3 LightPosition_cameraspace = (V * vec4(LightPosition_worldspace, 1)).xyz;
	 LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
// Normal of the the vertex, in camera space
	 Normal_cameraspace = (V * M * vec4(vertexNormal_modelspace, 0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
};